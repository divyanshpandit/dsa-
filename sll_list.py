# -*- coding: utf-8 -*-
"""sll_list.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OA2hIbURFUvhKB_re9dTNhzeDfPpCrd8
"""

class Node:
  def __init__(self,item=None, next=None):
    self.start= None
    self.item=item
    self.next=next

class sll:
  def __init__(self,start=None):
    self.start=start
  def insert_at_first(self,data):
    n=Node(data)
    if self.start is None:
       n.next=None
       self.start=n
    else:
      n.next=self.start
      self.start=n
  def insert_at_last(self,data):
    n=Node(data)
    if self.start is None:
      self.start=n
    else:
      temp=self.start
      while temp.next is not None:
        if temp.next==None:
          break
        temp=temp.next
      n.next=None
      temp.next=n
  def insert_after(self,tempd,data):
    n=Node(data)
    if self.start is None:
      return
    else:
      temp=self.start
      while temp.next is not None:
        if temp.item==tempd:
          n.next=temp.next
          temp.next=n
          break
        temp=temp.next
      if temp.next ==None:
        n.next=None
        temp.next=n
  def delete_first(self):
    if self.start is None:
      return
    if self.start.next==None:
      self.start=None
    else:
      self.start=self.start.next
  def delete_last(self):
    if self.start is None:
      return
    if self.start.next==None:
      self.start=None
    else:
      temp=self.start
      while temp.next.next is not None:
        temp=temp.next
        break
      temp.next=None
  def delete_item(self,data):
    if self.start is None:
      return
    if self.start.next ==None and self.start.item==data:
      self.start =None
    if self.start.item==data:
      self.start=self.start.next
    else:
      temp=self.start
      while temp.next is not None:
        if temp.next.item==data:
          temp.next=temp.next.next
          break
        temp=temp.next
      if temp.item==data:
        temp.next=None
  def print_list(self):
    if self.start is None:
      print("empty hai")
      return
    temp=self.start
    while True:
      print(temp.item, ' ')
      if temp.next==None:
        break
      temp=temp.next
    print()
  def __iter__(self):
    return slliterator(self.start)
class slliterator:
  def __init__(self,start):
    self.current=start


  def __iter__(self):
    return self
  def __next__(self):
    if self.current is None:
      raise StopIteration
    data=self.current.item
    self.current=self.current.next
    return data

q=sll()
q.insert_at_first(40)
q.insert_at_first(50)
q.insert_at_last(60)
q.insert_after(60,20)

q.delete_item(20)
q.print_list()
for item in q:
  print(item)